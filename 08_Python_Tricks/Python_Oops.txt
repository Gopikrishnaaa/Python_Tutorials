Python Oops:
============

Oops was invented in 1960

Oops is a paradigm(pattern) for code organization and design

The Oops paradigm:
	-- Organizes data into objects and functions into methods
	-- Defines object specifications ( data and methods ) in classes
promotes collaboration, code extension and maintenance 


====================================================================================
Procedural paradigm:
Example:
========
def increment(val):
    return val+1


this = 0
this = increment(this)
this = increment(this)
print(this)


=======================================================================================

Object Paradigm:
Example:
========
class MyCustomInc(object):
    def __init__(self):
        self.val = 0
    def increment(self):
        self.val = self.val + 1
    def __repr__(self):
        return str(self.val)
    
this = 0
this = MyCustomInc()
this.increment()
print(this)

============================================================================================

Three pillers of Oops:

-- Encapsulation
-- Inheritance
-- Polymorphism


=============================================================================================

What is Object?

Object is an Entity that holds data in the form of attributes


=============================================================================================
Modules Vs Classes

Module --> is a file that containes python code
Class  --> Is a Python Code


Ex:
from collections import Counter

Here 
collections --> Module
Counter     --> Class

==================================================================================================



Class --> It is a blueprint for an Instance
Instance --> A constructed objcet of class
Attribute --> Any object value: object.attribute
Method --> A callable attribute defined in the class

===========================================================================================================================================

Node: When you call a metod in an Instance the instance get passed as the first argument
Ex:
class MyClass(object):
    def my_method(self):
        print(self)
        
        
this = MyClass()
this.my_method()
print(this)

Out Put:
<__main__.MyClass object at 0x7ff7482b3b70>
<__main__.MyClass object at 0x7ff7482b3b70>


Here: 
self hex code and this object hex code are same which tells us that instance get passed as the first argument to the method
=============================================================================================================================================

Instance methods are variables defined in the class

the methods are also accessed through the instance.method()
when we call the method through the instance the instance is get's passed as first argument

=================================================================================================================================================


What is Objece?
Object is a unit of data (having one or more attributes) of a pirticular class or type with associated methods

==================================================================================================================================================

What is self?

self is the object on which the method was called


Ex:
class MyClass(object):
	def my_method(self):
		return 1
myinst = MyClass()
myinst.my_method()

In the above example self is nothing but the myinst


====================================================================================================================================================


Encapsulation:


















